@startuml

interface IElement {
    <i>An element in collection</i>
    <i>(collection item) with real</i>
    <i>object.</i>
    __
    +{method} IsEmpty(): Boolean
    +{method} Clear()
    +{method} Remove()
}

class TElement {
    <i>The default implementation</i>
    <i>of IElement.</i>
    __

    - FValue: Pointer
    __
    +{field} Value: Pointer
    __
    #{method} Create()
    #{method} SetValue(Val: Pointer)
    +{method} Equals(Obj: TObject): Boolean
    __IElement__
    +{method} IsEmpty(): Boolean
    +{method} Clear()
    +{method} Remove()
    __
    +{method} \~Destroy()
}
TElement <|.. IElement

class TItem
TItem <|-- TElement

class TNode
TNode  <|-- TElement

interface ICollection {
    <i>The root interface in the collection hierarchy.</i>
    <i>A collection represents a group of objects,</i>
    <i>known as its elements.</i>
    __
    +{method}  Add(const Obj: Pointer): Boolean
    +{method}  Contains(const Obj: Pointer): Boolean
    +{method}  GetCount(): Integer
    +{method}  IsEmpty(): Boolean
    +{method}  Remove(const Obj: Pointer): Boolean
    +{method}  ToArray(): TPointers
    +{method}  Clear()
}

interface IList {
    <i>An ordered collection (also known as a sequence).</i>
    __
    +{method}  Get(Index: Integer): Pointer;
    +{method}  IndexOf(const Obj: Pointer): Integer;
    +{method}  Insert(Index: Integer; const Obj: Pointer): Boolean;
    +{method}  Move(FromIndex, ToIndex: Integer): Boolean;
    +{method}  Remove(Index: Integer): Pointer; overload;
    +{method}  Swap(Index1, Index2: Integer): Boolean;
    +{method}  Update(Index: Integer; const Obj: Pointer): Boolean;
}
IList <|-- ICollection

class TLinkedList {
    <i>The double linked list.</i>
    __
    - FFirst: PListItem;
    - FLast: PListItem;
    - FCount: Integer;
    - FUnique: Boolean;
    __
    #{method} AddItem(const Value: Pointer): PListItem
    #{method} InsertItem(Index: Integer; const Value: Pointer): PListItem
    #{method} ItemOf(const Value: Pointer): PListItem
    #{method} ItemOf(Index: Integer): PListItem
    #{method} RemoveItem(Item: PListItem): Pointer
    __
    +{field} First: PListItem
    +{field} Last: PListItem
    +{field} Count: Integer
    +{field} Unique: Boolean
    __
    +{method} AddFirst(const Value: Pointer): Boolean
    __ICollection__
    __IList__
    +{method}  Get(Index: Integer): Pointer;
    +{method}  IndexOf(const Obj: Pointer): Integer;
    +{method}  Insert(Index: Integer; const Obj: Pointer): Boolean;
    +{method}  Move(FromIndex, ToIndex: Integer): Boolean;
    +{method}  Remove(Index: Integer): Pointer; overload;
    +{method}  Swap(Index1, Index2: Integer): Boolean;
    +{method}  Update(Index: Integer; const Obj: Pointer): Boolean;
}
TLinkedList <|.. IList

@endtuml
